# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
lane :open_pr_rc do |options|
  UI.message 'Automobot attempting to create a PR....'

  create_pull_request(
    api_token: ENV["BOT_PAT"],
    repo: 'january67/mobile_test',
    title: "Release #{options[:rc_version]} (RC#{options[:rc_number]})",
    head: "release/#{options[:rc_version]}",
    base: 'releases',
    assignees: 'loyalBot',
    team_reviewers: ['change-review-board']
  )
  if lane_context[SharedValues::GITHUB_API_STATUS_CODE] != 201
    UI.user_error!("Failed to create pull request")
  end 
  
end

lane :merge_draft_rc do |options|
  version = options[:rc_pr_head].split("/").last
  merge_pr(
    pr_number: options[:pr_number]
  )

  get_latest_release(
    version: version
  )

  create_release_tag(
    latest_release_tag: lane_context[SharedValues::LATEST_RC_VERSION],
    version: version,
    found_matching_version: lane_context[SharedValues::FOUND_MATCHING_VERSION_BOOL]
  )

  draft_release(
    next_release_tag: lane_context[SharedValues::NEXT_RELEASE_TAG],
    version: version
  )

  # UI.message "Automobot attempting to merge pr number - #{options[:pr_number]}, head #{options[:rc_pr_head]}"

  
  # body = JSON.generate({'merge_method' => 'merge'})

  # github_api(
  #   api_token: ENV["BOT_PAT"],
  #   http_method: 'PUT',
  #   path: "/repos/january67/mobile_test/pulls/#{options[:pr_number]}/merge",
  #   body: body
  # )

  # if lane_context[SharedValues::GITHUB_API_STATUS_CODE] != 200
  #   UI.user_error!('Failed to merge pull request')
  # end

  # create_release(title: options[:rc_pr_title])
end


lane :create_release do |options|
  
  # "Release 1.129.0 (RC1) -> 1.129.0-rc.1"
  tag = options[:title].sub(/Release/, '').sub(/\(RC/, '-rc.').gsub(/\s|\)$/, '')
  # "Release 1.129.0 (RC1) -> 1.129.0 (RC1)"
  title = options[:title].sub(/Release /, '')
  # release_config = {
  #   'tag_name' => "#{tag}",
  #   'name' => "#{title}",
  #   'target_commitish' => 'releases',
  #   'generate_release_notes' => true
  # }
  body = JSON.generate({'tag_name' => "#{tag}",
    'name' => "#{title}",
    'target_commitish' => 'releases',
    'generate_release_notes' => true})
  # release_config = JSON.generate(release_config)

  github_api(
    api_token: ENV["BOT_PAT"],
    http_method: 'POST',
    path: '/repos/january67/mobile_test/releases',
    body: body
  )

  if lane_context[SharedValues::GITHUB_API_STATUS_CODE] != 201
    UI.user_error!("Failed to create release")
  end

end

# lane :query_tags do
#   response = github_api(
#     server_url: 'https://api.github.com',
#     api_token: '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',
#     http_method: 'GET',
#     path: '/repos/january67/mobile_test/releases?per_page=15'
#   )
#   release_list = lane_context[SharedValues::GITHUB_API_JSON]
#   # puts release_list
#   # puts release_list.sort_by {|release| release.tag_name}

#   # dog = release_list.map{|obj| obj.slice('name')}
#   # release_tags = dog.values
#   puts release_list.map { |entry| entry['tag_name'] }
#   # filter_tags(
#   #   release_tag: '1.120.0',
#   #   json_last_15_releases: release_list.map { |entry| entry['tag_name'] }
#   # )
#   # puts lane_context[SharedValues::FOUND_MATCHING_VERSION_BOOL]
#   # last_release_tag = lane_context[SharedValues::LATEST_RC_VERSION]

#   # create_release_tag(
#   #   latest_release_tag: lane_context[SharedValues::LATEST_RC_VERSION],
#   #   release_version: '1.120.0',
#   #   found_matching_version: lane_context[SharedValues::FOUND_MATCHING_VERSION_BOOL]
#   # )
#   # create_release()
# end

lane :yo do 
  


  hi(title: "Release 1.129.0 (RC3)", input: "1.130.1 (RC2)")
end

lane :hi do |options|
  version = options[:title].match(/\d+\.\d+\.\d+/)[0]
  tag = options[:title].sub(/Release/, "").sub(/\(RC/, "-rc.").gsub(/\s|\)$/, "")
  title = options[:title].sub(/Release /, "")

  branch = options[:input].gsub(/\s*\(.*\)/, '').gsub(/(\d)$/, '0')
  # version = options[:title].match(/\d+\.\d+\.\d+/)[0]
  # tag = options[:title].sub(/Release/, "").sub(/\(RC/, "-rc.").gsub(/\s|\)$/, "")
  # final = tag.gsub(/\s|\)$/, "")
  # title = options[:title].sub(/Release/, "").delete_prefix(' ')
  puts title
  puts version
  puts tag
  puts branch
  #puts final
 
   
 end